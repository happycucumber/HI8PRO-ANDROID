#line 2 "/home/sangmin/cm12.1/out/host/linux-x86/obj32/EXECUTABLES/checkpolicy_intermediates/policy_scan.cpp"

#line 4 "/home/sangmin/cm12.1/out/host/linux-x86/obj32/EXECUTABLES/checkpolicy_intermediates/policy_scan.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 211
#define YY_END_OF_BUFFER 212
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1015] =
    {   0,
        0,    0,  212,  210,  190,    1,  195,  210,  189,  210,
      200,  201,  209,  197,  205,  206,  179,  183,  183,  198,
      199,  210,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  204,  207,  196,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  202,  210,  203,  208,
      190,    1,  192,    0,  189,  189,  193,  179,  186,  183,
        0,  182,  182,  182,    0,  185,  191,  181,    0,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,

      181,  181,  181,  100,  181,  181,  181,  181,  158,  160,
      181,   38,  181,  181,  154,  156,  181,  181,  181,  181,
      181,  181,  181,   91,  181,  181,  181,  181,  136,  138,
      140,  181,  181,  181,  181,  181,  181,  181,  148,  150,
      152,  181,  181,  181,  181,  142,  144,  146,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,   99,  181,  181,  181,  157,  159,  181,   39,
      181,  181,  153,  155,  181,  181,  181,  181,  181,  181,
      181,   92,  181,  181,  181,  181,  135,  137,  139,  181,
      181,  181,  181,  181,  181,  181,  147,  149,  151,  181,

      181,  181,  181,  141,  143,  145,  181,  181,  181,  194,
      180,  189,  186,  186,  183,  182,  182,  182,  182,  182,
      182,  182,    0,  185,  181,  181,  181,  181,  181,   93,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  106,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  178,  181,  181,  181,  181,  181,   95,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
       14,  181,  181,  181,  181,  181,  181,  181,   98,  181,
      181,   94,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  105,  181,  181,  181,  181,  181,  181,  181,  181,

      181,  181,  181,  181,  177,  181,  181,  181,  181,  181,
       96,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,   15,  181,  181,  181,  181,  181,  181,  181,
       97,  189,  186,  186,  183,  182,  182,  182,    0,  181,
      181,  181,  181,  181,  181,   34,  181,  181,  181,  181,
      181,  181,  181,  181,  181,   40,  181,  181,  181,  181,
      176,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,   16,  181,  181,  181,  181,  102,  181,   32,   70,
      181,  181,  181,  181,  181,   35,  181,  181,  181,  181,

      181,  181,  181,  181,  181,   41,  181,  181,  181,  181,
      175,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,   17,  181,  181,  181,  181,  101,  181,   33,   71,
      181,  189,  186,  186,  186,  183,    0,   42,   74,  181,
      181,  181,    6,    2,  181,  181,  181,  108,  181,  181,
      104,  112,  181,  181,  181,  181,  181,  181,   62,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,   64,  181,  181,   18,  181,  181,  181,  181,
      181,  181,  181,  181,   24,  181,  181,   43,   75,  181,

      181,  181,    7,    3,  181,  181,  181,  107,  181,  181,
      103,  181,  111,  181,  181,  181,  181,  181,   63,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,   65,  181,  181,  181,   19,  181,  181,  181,
      181,  181,  181,  181,  181,   25,  181,  189,  186,  186,
      181,  181,  181,  181,    4,  181,  181,  181,  181,  181,
      181,  109,  181,  181,  181,  181,  181,  181,   88,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,   82,   84,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,    5,  181,

      181,  181,  181,  181,  181,  110,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,   83,   85,  181,
      181,  181,  181,  181,  181,  181,  181,  188,  188,  184,
      186,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  118,
      181,  181,  181,  120,  181,  114,  181,   89,  181,  181,
      181,  181,   36,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  117,  181,

      181,  181,  119,  181,  113,  181,  181,  181,  181,  181,
       37,  181,  181,  181,  181,  181,  181,  181,  189,  184,
      181,  181,  181,   60,  181,  181,  181,  181,  181,  181,
      134,   12,  122,  181,  174,  181,  181,  116,  181,   90,
      181,  181,  181,  181,  181,  181,   86,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,   61,  181,
      181,  181,  181,  181,  181,  133,   13,  121,  181,  173,
      181,  181,  115,  181,  181,  181,  181,  181,  181,  181,
       87,  181,  181,  181,  181,  181,  181,  181,  181,  189,
      184,   44,  181,   78,    8,  181,  181,  181,   58,   80,

      181,  181,  181,  124,  181,  181,  181,  181,  181,  162,
      181,  181,  181,  181,   26,  181,  181,  181,  181,  181,
      181,   45,  181,   79,    9,  181,  181,  181,   59,   81,
      181,  181,  181,  123,  181,  181,  181,  181,  181,  161,
      181,  181,  181,  181,  181,  181,  181,   27,  181,  181,
      181,  189,  187,  181,   76,  181,  181,  181,  181,  181,
      181,  181,  181,  181,   72,  181,  164,  181,  181,  181,
      181,  181,   30,  181,  181,  181,  181,  181,   77,  181,
      181,  181,  181,  181,  181,  181,  181,  181,   73,  181,
      163,  181,  181,  181,  181,  181,  181,  181,  181,   31,

      181,  181,  181,  181,  181,  181,  130,  181,  181,  181,
      181,  181,  181,  181,  181,   56,  181,   50,   48,  181,
      181,  181,  181,  181,  181,  181,  129,  181,  181,  181,
      181,  181,  181,  181,  181,   57,   51,   49,  181,  181,
      181,  181,  181,  168,  170,  166,  132,  128,   66,  181,
      126,  181,  181,  181,  181,  181,  181,  181,  181,  167,
      169,  165,  131,  127,   67,  181,  125,  181,  181,  181,
      181,  181,  181,  181,  172,  181,  181,   20,  181,   28,
      181,   10,  181,  171,  181,  181,  181,   21,  181,   29,
       11,   22,  181,  181,  181,  181,   23,  181,  181,  181,

      181,  181,  181,   52,   46,  181,  181,   53,   47,   68,
       54,   69,   55,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    1,    8,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   21,   21,   21,   21,   21,   22,   23,    1,
       24,    1,    1,    1,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   34,
       50,    1,   51,   52,   53,    1,   54,   55,   56,   57,

       58,   59,   60,   61,   62,   34,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
       77,   34,   78,   79,   80,   81,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[82] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    4,    5,    6,    7,    7,    7,    7,
        7,    8,    1,    1,    7,    7,    7,    7,    7,    7,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    1,
        1,    1,   10,    7,    7,    7,    7,    7,    7,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,    1,    1,
        3
    } ;

static yyconst flex_int16_t yy_base[1030] =
    {   0,
        0,    0, 2316, 2317,   80,    0, 2291,    0, 2250, 2305,
     2317, 2317, 2317, 2317, 2317, 2317,    0,   70,  132, 2290,
     2317, 2287,  178,   65,   69,   94,   99,  130,  239,  151,
       82, 2281,  252,  142,   54,   77,  247,  281,  278,  294,
      306,   93,  102, 2317, 2317, 2317,  293,  296,  306,  309,
      333,  336,   57,  260,  135,  364,  263,  105,  234,  329,
      380,  350,  395,  400,  113,  116, 2317, 2230, 2317, 2317,
      175,    0, 2317, 2302,    0, 2245, 2317,    0,  422,  456,
     2284,  499,  433,  542, 2283,    0, 2317, 2289,    0,  585,
        0, 2274,  319,  200,  243,  280,  276, 2258,  396,  357,

     2271,  399,   73, 2271, 2263,  335, 2269,  127, 2268, 2267,
      259, 2266,  289,  419, 2265, 2264,  346,  299,  360,  377,
      416,  382,  372, 2263,  394,  404,  415,  451, 2262, 2261,
     2260,  147,  107,  332,  429,  244,  435,  449, 2259, 2258,
     2257,  450,  459,  432,  460, 2256, 2255, 2254, 2253,  461,
      466,  469,  327,  462,  473,  438, 2209,  478,  470, 2221,
      472,  477, 2250, 2214,  493,  403, 2248, 2247,  480, 2246,
      518,  474, 2245, 2244,  467,  514,  494,  521,  544,  523,
      515, 2243,  522,  547,  552,  556, 2242, 2241, 2240,  553,
      554,  557,  559,  561,  537,  562, 2239, 2238, 2237,  563,

      564,  579,  580, 2236, 2235, 2234,  596,  599,  600, 2317,
     2317, 2196,    0,  632,  654,  697,    0,    0,  638,  647,
        0,    0, 2239,    0, 2245,  740,    0,  605,  607, 2230,
      647,  657,  602, 2229,  648,  649,  656,  659, 2232,  666,
      676, 2227,  678,  665,  617,  667,  669,  699, 2226, 2225,
      700, 2224,  716,  704,  703,  707, 2223, 2222, 2221,  708,
      706,  734,  733,  713,  720,  546,  743, 2220, 2219,  744,
     2218,  747,  746, 2217,  718, 2216,  749,  750, 2215,  751,
      677, 2214,  752,  753,  755,  756,  632,  757,  761,  763,
     2188,  773,  764,  771,  772,  788,  775,  778,  201,  777,

      780,  781,  779,  782,  798,  789,  784,  787,  792,  795,
     2212,  796,  791,  801,  802,  803,  788,  804,  812,  818,
      822,  823, 2211,  825,  826,  830,  827,  833,  838,  839,
     2210, 2180,  879,  892,  899,  905,  911,  917, 2215,  848,
      850,  840,  845,  849,  846, 2207,  858,  911, 2206,  864,
      912,  920,  855,  877,  918, 2205, 2204,  915,  930,  917,
     2203,  921,  919,  922,  926,  928,  937,  933,  938,  941,
      945,  937,  949,  942, 2202,  951,  956,  959,  960, 2201,
      961,  966,  953,  963,  970, 2200, 2199,  876,  975, 2198,
      974,  964,  976,  977,  978, 2197,  981,  982,  979,  985,

      983,  991,  256,  988,  986, 2196,  987, 1006,  993,  994,
     2195,  995,  996,  997,  998, 1003, 1014, 1002, 1004, 1007,
     1013, 1009, 1001, 1014, 1005, 1018, 1017, 1020, 1027, 1032,
     1041, 1045, 1015, 1049, 1053, 1055, 2194, 1057, 1064, 2193,
     1058, 2217, 1087, 2205,    0, 1105, 2197, 2189, 2188, 1063,
     1066, 1071, 2187, 2186, 1092, 1072, 1100, 2185, 1103, 1102,
     2184, 2183, 1119, 1110, 1056, 1109, 1114, 1111, 2182, 1118,
     1115, 1116, 2181, 1127, 1121, 1120, 1128, 1129, 1131, 1132,
     1133, 1134, 1135, 1136, 1139, 2180, 1152, 1141, 1143, 2179,
     1147, 1150, 1156, 1151, 2178, 1162, 1168, 2177, 2176, 1140,

     1165, 1169, 2175, 2174, 1152, 1172, 1173, 2173, 1174, 1175,
     2172, 1192, 2171, 1176, 1179, 1181, 1182, 1180, 2170, 1197,
     1185, 1191, 1186, 1184, 1187, 1194, 1188, 1192, 1196, 1195,
     1197, 1198, 1200, 1201, 1216, 1204, 2169, 1206, 1210, 1205,
     1217, 1216, 1234, 1228, 1227, 2168, 1229, 1284, 1290, 1297,
     1239, 1243, 2167, 1231, 2166, 1256, 1249, 1257, 1241, 1260,
     1258, 2165, 1290, 1291, 1269, 1306, 1293, 1294, 2164, 1296,
     1295, 1300, 1303, 1310, 1297, 1304, 1317, 1312, 1330, 2163,
     1318, 1249, 2162, 1319, 2161, 2160, 2159, 1320, 1322, 1325,
     1340, 1342, 1341, 1329, 1330, 1331, 1332, 1334, 2158, 1335,

     1336, 1339, 1340, 1360, 1347, 2157, 1338, 1348, 1350, 1363,
     1351, 1355, 1352, 1356, 1358, 1353, 1359, 1357, 1363, 1362,
     1364, 1379, 1367, 1383, 1370, 1373, 1371, 2156, 2155, 1380,
     1386, 1396, 1397, 1387, 1397, 1398, 1403, 1438, 1444, 1459,
     2168, 1406, 1405, 1407, 1411, 1410, 1415, 1443, 1452, 1451,
     1408, 1444, 1445, 1453, 1469, 1459, 1461, 1462, 1457, 2153,
     1468, 1467, 1469, 2152, 1480, 2151, 1491, 2150, 1478, 1493,
     1481, 1482, 2149, 1487, 1484, 1486, 1502, 1499, 1504, 2148,
     1492, 1493, 1496, 1501, 1503, 1502, 1505, 1506, 1522, 1509,
     1510, 1511, 1512, 1527, 1514, 1515, 1516, 1519, 2147, 1520,

     1517, 1518, 2146, 1522, 2145, 1535, 1537, 1525, 1527, 1529,
     2144, 1538, 1544, 1545, 1542, 1534, 1540, 1556, 2166, 1598,
     2142, 1561, 1538, 2141, 1564, 1586, 2140, 1545, 1595, 1596,
     2139, 2138, 2137, 1584, 2150, 1583, 1541, 2135, 1594, 2134,
     2133, 1578, 1598, 1611, 1606, 1614, 2132, 1611, 1603, 1612,
     1614, 1619, 1632, 1633, 1620, 1621, 1622, 1579, 2131, 1624,
     1639, 1626, 1630, 1645, 1646, 2130, 2129, 2128, 1637, 2141,
     1634, 1633, 2126, 1638, 1636, 1639, 1640, 1660, 1655, 1644,
     2125, 1645, 1657, 1661, 1662, 1649, 1656, 1653, 1652, 2147,
        0, 1664, 1651, 2123, 2122, 1704, 1673, 1682, 2121, 2120,

     1711, 1671, 1686, 2119, 1666, 1698, 1702, 1705, 2118, 2117,
     1718, 1709, 1721, 1708, 2116, 1715, 1710, 1730, 1731, 1725,
     1721, 1718, 1719, 2115, 2114, 1736, 1740, 1742, 2113, 2104,
     1743, 1744, 1747, 2096, 1737, 1736, 1740, 1741, 1738, 2094,
     1757, 1758, 1745, 1746, 1761, 1762, 1763, 2093, 1750, 1751,
     1754, 2112, 2110, 1767, 2082, 1766, 1770, 1771, 1772, 1777,
     1769, 1784, 1760, 2073, 2071, 1787, 2064, 1787, 1796, 1812,
     1802, 1803, 2060, 1818, 1795, 1820, 1811, 1773, 2047, 1780,
     1033, 1823, 1824, 1827, 1829, 1834, 1821, 1823, 2041, 1825,
     2029, 1840, 1841, 1828, 1830, 1846, 1843, 1847, 1835, 2026,

     1831, 1848, 1853, 1850, 1851, 1852, 2039, 1854, 1856, 1654,
     1844, 1848, 1860, 1845, 1855, 2024, 1871, 2036, 2034, 1861,
     1881, 1857, 1863, 1881, 1887, 1897, 2031, 1899, 1901, 1888,
     1889, 1891, 1906, 1907, 1897, 2016, 2029, 2028, 1910, 1900,
     1898, 1913, 1915, 2027, 2026, 2025, 2024, 2023, 2008, 1904,
     2007, 1916, 2006, 1917, 2005, 1919, 1908, 1920, 1923, 2018,
     2017, 2015, 2014, 2013, 1996, 1907, 1995, 1925, 1926, 1918,
     1927, 1927, 1919, 1944, 2008, 1933, 1950, 1993, 1948, 1992,
     1959, 1991, 1928, 2004, 1924, 1940, 1951, 1988, 1960, 1985,
     1984, 1997, 1962, 1965, 1977, 1978, 1996, 1965, 1980, 1984,

     1986, 1967, 1988, 1994, 1993, 1977, 1990, 1992, 1437,  844,
      685,  401,  167, 2317, 2056, 2064, 2074, 2081, 2087, 2090,
     2094, 2098, 2101, 2105, 2110, 2117, 2121, 2123, 2131
    } ;

static yyconst flex_int16_t yy_def[1030] =
    {   0,
     1014,    1, 1014, 1014, 1014, 1015, 1014, 1016, 1017, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1018, 1019, 1019, 1020,
     1014, 1014, 1014,   23,   23,   23,   23,   23,   23,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29, 1014, 1014, 1014,   23,   23,   23,   23,
       23,   23,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29, 1014, 1014, 1014, 1014,
     1014, 1015, 1014, 1016, 1017, 1017, 1014, 1018, 1021,   19,
     1020, 1022, 1022, 1022, 1023, 1024, 1014, 1025, 1026,   29,
       90,   29,   29,   29,   29,   29,   29,   90,   29,   29,

       90,   29,   29,   29,   90,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   90,   29,   29,   90,
       29,   29,   29,   90,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29, 1014,
     1014, 1017, 1021, 1021,   19, 1022,  216,  216, 1022, 1022,
       84,   84, 1027, 1024, 1026,   90,  226,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,  226,   29,
       29,   29,   29,   29, 1025,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
      226,   29,   29,   29,   29, 1025,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29, 1017, 1021, 1021, 1019, 1022, 1022, 1022, 1028,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29, 1025,   29,
       29,   29,   29,   29,   29,   29, 1025,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29, 1025,   29,   29,
       29,   29,   29,   29,   29,   29, 1025,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29, 1017, 1021, 1021, 1021, 1019, 1014,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29, 1025,   29,   29,   29,   29,   29,   29, 1025,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29, 1025,   29,   29,   29,
       29,   29,   29,   29,   29, 1025,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29, 1025,   29,   29,   29,   29,   29,   29,   29, 1025,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29, 1025,   29,   29,   29,   29,   29,
       29,   29, 1025,   29,   29,   29,   29, 1017, 1021, 1021,
       29,   29,   29,   29,   29,   29,   29,   29,   29, 1025,
       29,   29,   29,   29,   29, 1025,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29, 1025,   29,
       29, 1025,   29,   29,   29,   29,   29,   29,   29,   29,
     1025, 1025, 1025,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29, 1025,   29,   29,   29,   29,   29, 1025,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29, 1025,   29, 1025,   29,   29,   29,   29,   29,   29,
     1025, 1025, 1025,   29,   29,   29,   29, 1017, 1017, 1021,
     1021,   29,   29,   29,   29,   29,   29,   29,   29, 1025,
       29,   29,   29,   29, 1025,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29, 1025,   29,   29, 1025,
       29,   29,   29,   29,   29,   29, 1025, 1025, 1025,   29,
       29,   29,   29,   29,   29,   29,   29,   29, 1025,   29,
       29,   29,   29, 1025,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29, 1025, 1025,   29,   29,   29,
       29, 1025, 1025, 1025,   29,   29,   29,   29, 1017, 1021,
       29,   29,   29,   29,   29, 1025,   29,   29, 1025, 1025,
       29,   29,   29,   29, 1025,   29,   29,   29,   29,   29,
       29,   29,   29, 1025,   29, 1025,   29,   29,   29,   29,
       29, 1025, 1025, 1025,   29,   29,   29,   29,   29,   29,
     1025,   29,   29, 1025, 1025,   29,   29,   29,   29, 1025,
       29,   29,   29,   29,   29,   29,   29, 1025, 1025,   29,
       29,   29, 1025, 1025, 1025,   29,   29,   29,   29, 1029,
     1021,   29,   29,   29,   29, 1025, 1025, 1025,   29,   29,

     1025, 1025, 1025,   29,   29,   29,   29,   29,   29,   29,
     1025,   29, 1025,   29,   29,   29,   29, 1025, 1025, 1025,
       29,   29,   29,   29,   29, 1025, 1025, 1025,   29,   29,
     1025, 1025, 1025,   29,   29,   29,   29,   29,   29,   29,
     1025, 1025,   29,   29, 1025, 1025, 1025,   29,   29,   29,
       29, 1029, 1029, 1025,   29, 1025, 1025, 1025, 1025, 1025,
     1025, 1025,   29,   29,   29,   29,   29, 1025,   29, 1025,
       29,   29,   29, 1025, 1025, 1025,   29, 1025,   29, 1025,
     1025, 1025, 1025, 1025, 1025, 1025,   29,   29,   29,   29,
       29, 1025, 1025,   29,   29, 1025, 1025, 1025,   29,   29,

       29, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,   29,
       29,   29, 1025,   29, 1025,   29,   29, 1025, 1025, 1025,
       29, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,   29,
       29,   29, 1025, 1025,   29,   29, 1025, 1025, 1025,   29,
       29, 1025, 1025, 1025, 1025, 1025, 1025, 1025,   29,   29,
       29, 1025,   29, 1025,   29, 1025,   29, 1025, 1025, 1025,
     1025, 1025, 1025, 1025,   29,   29,   29, 1025, 1025,   29,
     1025,   29,   29, 1025, 1025,   29, 1025,   29, 1025,   29,
     1025,   29, 1025, 1025,   29, 1025, 1025,   29, 1025,   29,
       29, 1025,   29, 1025, 1025, 1025, 1025,   29, 1025, 1025,

     1025,   29, 1025, 1025, 1025,   29, 1025, 1025, 1025,   29,
     1025,   29, 1025,    0, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014
    } ;

static yyconst flex_int16_t yy_nxt[2399] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,    4,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   32,   33,   34,   35,   36,   37,
       32,   38,   39,   40,   41,   42,   32,   43,   32,   44,
       45,   46,    4,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   32,   56,   57,   58,   59,   60,   32,   61,
       62,   63,   64,   65,   32,   66,   32,   67,   68,   69,
       70,   71,  121,   71,   79,   92,   80,   80,   80,   80,
       80,   81,  122,   98,   82,   82,   82,   82,   82,   82,

       92,   92,   92,   97,   99,   92,   92,  100,   92,   92,
       92,  112,   92,   92,  166,  242,  123,  150,  124,  113,
      114,   92,  101,   82,   82,   82,   82,   82,   82,   92,
       92,   92,  102,   92,  103,   92,   92,   92,   92,  104,
      151,   92,   92,   92,   92,   84,   79,  267,   80,   80,
       80,   80,   80,   81,  105,   92,   82,   82,   82,   82,
       82,   82,  179,   92,  246,   92,  208,   92,  109,  110,
       92,  180,  106,   92,   92,   92,   71,  119,   71,   92,
      120,   89,  209,  111,  266,   82,   82,   82,   82,   82,
       82,   88,   89,  170,   90,   90,   90,   90,   90,   81,

      171,  172,   91,   91,   91,   91,   91,   91,   92,   92,
       92,   92,   92,   93,   92,   94,   92,   92,   92,   92,
       92,   95,   96,   92,   92,   92,   92,  230,   92,   92,
       88,   91,   91,   91,   91,   91,   91,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,  107,  107,  107,  107,  107,
     1014,  411,   92,   92,   92,   92,   92,  108,   92,  115,
      116,   92,   92,  125,   92,  126,   92,  167,  168,  127,
      117,  270,   92,   92,   92,  128,  231,   92,   92,  247,
      118,   92,   92,   92,   92,   92,   92,   92,  129,  130,

      131,  181,  135,  182,   92,  132,  136,  232,   92,  133,
      137,  139,  140,  141,  233,  248,  138,   92,  142,  134,
      249,  169,   92,  146,  147,  148,  177,   92,   92,  178,
       92,   92,  508,   92,   92,  143,   92,   92,  144,   92,
       92,   92,  145,   92,   92,  253,   92,   92,  149,   92,
       92,  228,   92,   92,  229,   92,  152,   92,  153,  157,
       92,  244,  156,   92,  154,  155,  160,  268,   92,  158,
       92,   92,  159,   92,   92,  161,   92,   92,   92,   92,
       92,  173,  174,  282,  183,   92,  184,  245,   92,  164,
      185,  252,   92,  237,  238,  186,  162,  187,  188,  189,

       92,  163,  254,  193,  255,   92,  165,  194,   92,  258,
       92,  195,  197,  198,  199,  260,  196,  204,  205,  206,
      235,  175,   92,   92,   92,  259,  261,   92,   92,   92,
      176,   92,   92,  190,  236,  240,  241,  191,  214,  214,
      214,  214,  214,   92,   92,  262,  192,   92,  200,  220,
      220,  220,  220,  220, 1014,  250,  263,   92,  251,  256,
       92,  257,  271,   92,  201,  269,   92,  202,  298,  275,
      207,  203,  215,  215,  215,  215,  215,   92,   92,   92,
      216,  216,  216,  216,  216,  216,  264,   92,   92,   92,
       92,  273,  265,  272,   92,   92,  278,   92,   92,  276,

       92,   92,   92,  274,  285,   92,   92,  279,   92,  216,
      216,  216,  216,  216,  216,  217,  217,  217,  217,  217,
       81,   92,   92,  218,  218,  218,  218,  218,  218,  284,
      280,  287,  281,  283,  289,  290,  292,  293,  302,  299,
      304,  303,   92,   92,  288,  296,   92,  294,  297,   92,
       92,   92,  218,  218,  218,  218,  218,  218,  221,  221,
      221,  221,  221, 1014,  306,   92,  222,  222,  222,  222,
      222,  222,   92,  300,   92,   92,  380,  307,  301,  310,
       92,   92,   92,  313,   92,   92,  312,   92,  305,   92,
       92,   92,   92,  323,  311,  222,  222,  222,  222,  222,

      222,  226,  226,  226,  226,  226,   81,   92,   92,  227,
      227,  227,  227,  227,  227,  308,  314,  309,  318,  316,
      320,  315,  319,  321,   92,  317,  322,   92,   92,  342,
       92,   89,  325,   92,  324,   92,  326,  346,  227,  227,
      227,  227,  227,  227,  327,  343,  333,  328,  334,  334,
      334,  334,  334,  329,  220,  220,  220,  220,  220, 1014,
       92,  359,  330,  220,  220,  220,  220,  220, 1014,  331,
      335,  335,  335,  335,  335,   92,   92,   92,  336,  336,
      336,  336,  336,  336,   92,   92,  349,   92,  344,  345,
      348,  353,  350,   92,   92,   92,  360,   92,  354,   89,

      361,  351,  398,  358,   92,   92,   92,  336,  336,  336,
      336,  336,  336,  337,  337,  337,  337,  337,   81,  355,
      357,  338,  338,  338,  338,  338,  338,   92,   92,  367,
      368,   92,   92,  375,   92,   92,   92,  362,  365,  371,
      374,   92,  388,  393,   92,  378,   92,  370,   92,  369,
      338,  338,  338,  338,  338,  338,  340,  340,  340,  340,
      340,   92,   92,  379,  341,  341,  341,  341,  341,  341,
      376,   92,   92,  377,   92,   92,  386,   92,   92,   92,
       92,   92,  391,   92,   92,   92,  384,  381,  385,   92,
      390,   92,   92,  341,  341,  341,  341,  341,  341,   92,

       92,   92,   89,   92,  392,   92,   92,   92,   92,   92,
       92,  417,   92,  397,  395,   92,   92,   92,  396,   92,
       92,  394,  399,   92,   92,  400,   92,  403,  406,   92,
       92,   92,   92,  401,  404,  405,  410,  413,  414,  416,
       92,  409,  407,  412,  418,  415,   92,  425,  421,  422,
       92,   92,  423,   92,   92,   92,  420,  424,   92,  429,
      408,   92,  419,  430,  428,  426,   92,   92,   92,   81,
      427,   81,   92,   92,   92,  432,   92,   92,   92,  433,
      438,  450,  448,   92,  431,  436,   92,  437,  452,  451,
      439,  449,   92,  434,  435,  443,  443,  443,  443,  443,

      441,  492,  455,  458,   92,   92,  333,  440,  444,  444,
      444,  444,  444,  445,  459,  446,  446,  446,  446,  446,
       81,  220,  220,  220,  220,  220,   81,  220,  220,  220,
      220,  220,   81,  220,  220,  220,  220,  220,   81,   92,
       92,   81,  460,   92,   89,   92,   92,   92,   92,   92,
       92,   89,  462,  453,   92,  456,   92,  465,  467,  464,
      466,   92,  472,  469,  457,   92,   92,  468,  470,   92,
       92,  471,  463,   92,  474,  476,  473,   92,  475,   92,
      477,   92,  480,  479,   92,  481,  482,   92,   92,   92,
      485,   92,   92,  484,   92,  489,  490,  488,   92,  493,

      494,  497,   92,   92,   92,   92,   92,   92,  486,   92,
       92,   92,   81,   92,   92,   92,   92,  495,  487,   92,
       89,   92,   92,   92,   92,   92,   92,  496,   89,   92,
       92,   92,   92,   92,  498,   92,  504,   92,  500,  510,
      502,   92,   92,   92,  511,   92,   92,   89,   92,  501,
      499,  505,  503,  509,  506,   92,  526,  522,  513,  515,
       92,  517,  528,  507,  514,  516,  519,  518,  521,   92,
      523,  524,  530,   92,  520,  531,  512,   92,  525,  529,
      527,   92,  532,   92,   92,   92,   92,  538,  551,  533,
      552,   92,   92,  553,   92,  562,  924,  535,  536,   92,

       92,  549,  534,  550,  550,  550,  550,  550,  540,  554,
      539,  542,  541,  556,  547,  537,  543,  544,  545,  445,
       92,  446,  446,  446,  446,  446, 1014,  558,   92,  555,
       92,   92,   89,   89,  546,  557,  561,   92,   92,   92,
      564,  563,   92,   92,   92,  571,  559,  560,   92,   92,
      566,  568,  567,  570,  565,   92,   92,   92,  572,   92,
       92,   92,   92,   92,   92,  573,   89,   92,   92,   92,
      576,   92,  578,  575,  574,   92,   89,  580,   92,   92,
       92,  577,  581,  583,   92,  587,  584,  579,  591,  590,
      586,  588,  594,   92,  595,  582,   92,   92,  592,  589,

       92,   92,   92,   92,   92,  593,   89,   92,   92,   92,
       92,   89,   92,   92,   92,   92,   92,  599,  596,   92,
       92,  597,   92,   92,   92,   92,   92,  602,   92,   92,
       89,  605,   92,   92,   92,  598,  601,  608,   92,  613,
      614,  600,  607,  569,   92,   92,  606,  603,   89,  604,
      611,  609,  622,  616,  612,   92,   92,   92,  610,   92,
      615,  619,  628,   89,  621,  617,  618,   92,  649,   92,
      623,   92,  645,  620,   89,  625,  626,   92,  643,  630,
      646,  627,  637,  642,   92,   92,   92,  624,  629,  631,
      670,  634,  647,  636,  648,  654,  651,   92,  632,  635,

      638,  639,  638,  638,  638,  633,  640,  640,  640,  640,
      640,  549,  650,  641,  641,  641,  641,  641,   92,   92,
       89,   92,   92,   92,   92,   92,  657,  661,   92,  653,
      659,   92,   92,  652,  658,  656,  655,  660,   92,  663,
       92,  664,  662,  665,   89,   92,   92,   92,   92,  666,
       92,  672,  674,   92,   89,   89,   89,   92,   92,   92,
       92,  669,   92,   92,   92,  675,   92,   92,   92,  676,
      678,  677,  680,  667,   89,   92,   92,   89,   92,   92,
       92,   92,  679,   92,   92,   92,   92,   92,  685,  683,
       92,   92,   92,   89,  682,   92,  688,   89,   92,   92,

       89,   92,  681,  684,  687,  693,  700,  686,   92,  691,
       89,   89,  689,  690,  692,   92,  696,  704,  697,  698,
      701,  695,  694,  699,  668,   92,   92,  702,  703,  705,
      709,   92,  710,   92,   92,   92,   92,  711,   92,   92,
      722,  708,  725,   92,  723,  731,  712,  719,  715,  721,
      706,   89,  707,  713,  638,  638,  638,  638,  638,  724,
      638,  638,  638,  638,  638,   89,  714,  726,  716,  727,
      717,   92,   92,   92,  718,  720,  720,  720,  720,  720,
       92,   92,  733,   89,  728,   92,  732,   92,  737,   92,
       92,  734,  739,  741,  729,   92,   92,   92,  730,  738,

      735,  742,  736,  740,  743,   89,   92,   89,   92,   92,
       92,  749,   92,   89,   92,   92,   89,  746,   89,  745,
       92,   92,  747,  751,   92,  750,  752,  748,  754,   92,
       92,   92,  744,   92,   92,  753,   89,   92,   92,   92,
       92,   89,   92,   92,   92,   92,   92,   92,   92,   89,
       92,   89,   89,   92,  761,   92,  757,   92,   89,   89,
      762,  758,   92,  756,  760,  806,   92,  763,   92,   92,
       92,  772,  775,   92,  766,  777,  768,  759,  769,  776,
      767,  773,  774,  740,   92,  771,  794,  770,  800,   92,
      779,  783,   92,  764,  780,  786,  781,  765,  785,  793,

       89,  795,  782,  787,  778,  788,   92,   92,  784,   89,
       89,   92,   92,  789,  791,  791,  791,  791,  791,  801,
      803,  804,   92,  809,  805,   89,   92,  796,   89,  797,
      798,   92,  807,   89,   92,  811,  802,  810,  812,   92,
       92,  817,   92,  814,  816,  815,   89,   89,   92,   92,
       92,  813,   92,   89,   92,  824,  818,  819,   92,   89,
       89,   92,   92,  821,   92,   92,   92,   92,   92,   89,
      820,   89,   92,   92,   89,   89,   89,   92,  822,   92,
       92,   92,   92,  829,   92,   89,  836,   89,  823,  825,
      863,  949,   92,  838,   92,  861,   89,  855,  831,  833,

       89,  830,  834,  835,  837,  843,  844,  840,  826,  850,
      827,  828,  839,  841,  832,  846,  854,  849,   89,  848,
      842,  858,  845,  851,  859,   89,   92,  847,  856,  862,
       92,  866,   89,   92,  869,   89,   92,   92,   92,   89,
      872,  864,  857,   92,   89,   89,   92,   92,  865,   92,
       89,  871,  873,  860,   89,  868,   89,   89,   89,  875,
      874,   89,  877,  870,   92,   92,   92,  876,   92,   92,
      878,   89,   89,   92,   92,   89,   89,   89,   92,   92,
       89,   89,   92,   89,   89,   89,   89,   89,   92,  880,
      887,   89,  910,  879,   89,  891,  890,  885,   89,  894,

      906,   89,  881,  903,  899,  904,  908,  888,  902,   89,
      905,  907,  883,  884,  889,   92,  882,  895,  886,  897,
      896,  900,  892,  901,   92,  912,   89,  909,  893,  913,
       92,   92,   89,  898,   89,  921,  919,   89,   89,   92,
      914,   89,  922,   89,  915,  923,  918,  917,   89,   92,
      916,   92,  920,   92,   89,   89,   92,   89,   92,   92,
       89,   89,   89,   92,   89,   89,   89,   89,   89,   89,
       89,   89,   92,   92,   89,   89,   92,   89,  944,  945,
      931,  926,  930,  943,  941,  951,  942,  950,  953,  927,
      925,  932,  952,  946,  928,   89,  947,  948,  954,   92,

      935,   89,  934,  937,  956,  929,  936,  940,  939,   92,
      933,   89,  938,   89,  955,   89,   92,   92,  957,   92,
       89,   89,  959,  958,   89,   92,   92,   89,   92,   89,
       89,   89,   92,   89,   89,   92,   92,   89,  960,   89,
       89,   89,   89,  975,  961,  976,   92,   92,  974,  979,
      982,  981,   92,  965,   89,   92,  967,  993,   89,  977,
      966,   92,   89,  973,   89,   89,  962,  968,  970,  963,
      964,  972,  992,   89,   89,  988,  985,  998,  969,   89,
      984,  971,  994,  983,  990,  997,  995,  987,  989,  991,
       92,   89,   89,   92,   89,   92,  986,  996,   89, 1002,

       89,  999,   89, 1003,   89,   92,   89,   89,   89, 1010,
       89,   89,   92,   92, 1004, 1005,   92, 1000,   89,   92,
       92,   92,   89,   92,   92, 1011, 1001,   89,   89,   89,
     1006,   89,   89,  980,  978,   92,   92,   89,   89,   89,
       89,   89,   89,   89,   92,   89, 1007, 1012,   89, 1008,
       89, 1009,   92,   89,   92, 1013,   72,   92,   72,   72,
       72,   72,   72,   72,   72,   72,   74,   74,   74,   92,
       74,   74,   74,   74,   75,   92,   75,   75,   75,   75,
       75,   75,   75,   75,   78,   78,   78,   78,   92,   78,
       78,   83,   92,   83,   83,   83,   85,   85,  213,   92,

      213,  911,  213,  213,  219,  219,  219,  223,  223,  224,
       92,  224,  224,   88,   88,  853,   88,  853,   88,   88,
      225,   92,   92,  225,   92,  225,  225,  339,  339,  447,
      447,  852,   92,  852,  852,  852,  852,  852,  852,  852,
      852,   92,   92,   92,   92,   92,  867,   92,   92,   92,
       92,   92,  853,   92,   92,   89,   92,   92,   92,   92,
       92,  808,   92,   92,   89,   92,   92,   92,  799,   92,
      792,  790,   92,   92,   92,   92,  755,   92,   92,   92,
       92,   92,  549,   92,   92,   92,   92,  673,   92,   92,
      671,  668,   92,   92,   92,  644,   92,   92,   92,   92,

       92,   92,   92,   92,   92,   92,   92,  585,   92,  569,
       92,   92,   92,   92,   92,   92,   92,   92,   86,  333,
      548,   92,   92,   92,   92,   92,   92,   92,  491,  483,
      478,   92,  461,   92,  454,   92,   86,  442,   92,   92,
       92,  402,   92,   92,  389,  387,   92,  383,  382,   92,
      373,  372,  366,  364,  363,  356,  352,  347,   92,   89,
       86,  332,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,  295,   92,  291,
      286,  277,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,  243,   92,

      239,  234,   92,   89,   86,   86,  212,  211,  210,   92,
       87,   86,   77,   76,   73, 1014,    3, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014

    } ;

static yyconst flex_int16_t yy_chk[2399] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,   35,    5,   18,   53,   18,   18,   18,   18,
       18,   18,   35,   25,   18,   18,   18,   18,   18,   18,

       24,  103,   24,   24,   25,   36,   25,   25,   24,   24,
       31,   31,   25,   25,   53,  103,   36,   42,   36,   31,
       31,   42,   26,   18,   18,   18,   18,   18,   18,   26,
       43,   26,   26,   58,   27,  133,   27,   26,   26,   27,
       43,   65,   27,   27,   66,   18,   19,  133,   19,   19,
       19,   19,   19,   19,   28,  108,   19,   19,   19,   19,
       19,   19,   58,   55,  108,   28,   65,   28,   30,   30,
       34,   58,   28,   28,   28,  132,   71,   34,   71,   30,
       34, 1013,   66,   30,  132,   19,   19,   19,   19,   19,
       19,   23,   23,   55,   23,   23,   23,   23,   23,   23,

       55,   55,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   94,   94,  299,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   29,   29,   29,   29,   29,
       29,  299,   59,   29,   29,   29,   29,   29,   29,   33,
       33,   95,  136,   37,   29,   37,   29,   54,   54,   37,
       33,  136,   29,   29,  403,   37,   95,  111,   54,  111,
       33,   57,   29,   29,   29,   29,   29,   29,   38,   38,

       38,   59,   39,   59,   97,   38,   39,   96,   96,   38,
       39,   40,   40,   40,   97,  113,   39,  113,   40,   38,
      113,   54,   40,   41,   41,   41,   57,  118,   47,   57,
       47,   48,  403,   48,   41,   40,   47,   47,   40,   48,
       48,   49,   40,   49,   50,  118,   50,   93,   41,   49,
       49,   93,   50,   50,   93,  153,   47,   60,   47,   49,
      134,  106,   48,  106,   47,   47,   50,  134,   51,   49,
       51,   52,   49,   52,  117,   50,   51,   51,   62,   52,
       52,   56,   56,  153,   60,  100,   60,  106,  119,   52,
       60,  117,   56,  100,  100,   60,   51,   61,   61,   61,

      123,   51,  119,   62,  120,  120,   52,   62,   61,  122,
      122,   62,   63,   63,   63,  123,   62,   64,   64,   64,
       99,   56,  125,   63,   99,  122,  125,  102,   64, 1012,
       56,  166,  126,   61,   99,  102,  102,   61,   79,   79,
       79,   79,   79,  127,  121,  126,   61,  114,   63,   83,
       83,   83,   83,   83,   83,  114,  127,  135,  114,  121,
      144,  121,  137,  137,   63,  135,  156,   63,  166,  144,
       64,   63,   80,   80,   80,   80,   80,  138,  142,  128,
       80,   80,   80,   80,   80,   80,  128,  143,  145,  150,
      154,  142,  128,  138,  151,  175,  150,  152,  159,  145,

      161,  155,  172,  143,  156,  162,  158,  151,  169,   80,
       80,   80,   80,   80,   80,   82,   82,   82,   82,   82,
       82,  165,  177,   82,   82,   82,   82,   82,   82,  155,
      152,  158,  152,  154,  159,  159,  161,  161,  172,  169,
      175,  172,  176,  181,  158,  165,  171,  162,  165,  178,
      183,  180,   82,   82,   82,   82,   82,   82,   84,   84,
       84,   84,   84,   84,  177,  195,   84,   84,   84,   84,
       84,   84,  179,  171,  266,  184,  266,  178,  171,  180,
      185,  190,  191,  183,  186,  192,  181,  193,  176,  194,
      196,  200,  201,  195,  180,   84,   84,   84,   84,   84,

       84,   90,   90,   90,   90,   90,   90,  202,  203,   90,
       90,   90,   90,   90,   90,  179,  184,  179,  190,  186,
      192,  185,  191,  193,  207,  186,  194,  208,  209,  228,
      233,  245,  200,  228,  196,  229,  201,  233,   90,   90,
       90,   90,   90,   90,  202,  229,  214,  203,  214,  214,
      214,  214,  214,  207,  219,  219,  219,  219,  219,  219,
      287,  245,  208,  220,  220,  220,  220,  220,  220,  209,
      215,  215,  215,  215,  215,  231,  235,  236,  215,  215,
      215,  215,  215,  215,  237,  232,  236,  238,  231,  232,
      235,  240,  237,  244,  240,  246,  246,  247,  240, 1011,

      247,  238,  287,  244,  241,  281,  243,  215,  215,  215,
      215,  215,  215,  216,  216,  216,  216,  216,  216,  241,
      243,  216,  216,  216,  216,  216,  216,  248,  251,  253,
      254,  255,  254,  261,  261,  256,  260,  248,  251,  256,
      260,  264,  275,  281,  253,  264,  275,  255,  265,  254,
      216,  216,  216,  216,  216,  216,  226,  226,  226,  226,
      226,  263,  262,  265,  226,  226,  226,  226,  226,  226,
      262,  267,  270,  263,  273,  272,  273,  277,  278,  280,
      283,  284,  278,  285,  286,  288,  270,  267,  272,  289,
      277,  290,  293,  226,  226,  226,  226,  226,  226,  294,

      295,  292,  296,  297,  280,  300,  298,  303,  301,  302,
      304,  305,  307,  286,  284,  308,  317,  306,  285,  313,
      309,  283,  288,  310,  312,  289,  305,  292,  294,  314,
      315,  316,  318,  290,  292,  293,  298,  301,  302,  304,
      319,  297,  295,  300,  306,  303,  320,  313,  308,  309,
      321,  322,  310,  324,  325,  327,  307,  312,  326,  317,
      296,  328,  306,  318,  316,  314,  329,  330,  342,  340,
      315,  341, 1010,  343,  345,  320,  340,  344,  341,  321,
      327,  344,  342,  353,  319,  325,  347,  326,  347,  345,
      328,  343,  350,  322,  324,  333,  333,  333,  333,  333,

      330,  388,  350,  353,  388,  354,  334,  329,  334,  334,
      334,  334,  334,  335,  354,  335,  335,  335,  335,  335,
      335,  336,  336,  336,  336,  336,  336,  337,  337,  337,
      337,  337,  337,  338,  338,  338,  338,  338,  338,  348,
      351,  352,  355,  358,  359,  360,  355,  363,  352,  362,
      364,  367,  358,  348,  365,  351,  366,  362,  364,  360,
      363,  368,  369,  366,  352,  372,  369,  365,  367,  370,
      374,  368,  359,  371,  371,  373,  370,  373,  372,  376,
      374,  383,  377,  376,  377,  378,  379,  378,  379,  381,
      382,  384,  392,  381,  382,  384,  385,  383,  385,  389,

      389,  391,  391,  389,  393,  394,  395,  399,  382,  397,
      398,  401,  402,  400,  405,  407,  404,  389,  382,  402,
      408,  409,  410,  412,  413,  414,  415,  389,  417,  423,
      418,  416,  419,  425,  392,  420,  399,  422,  394,  405,
      397,  421,  424,  433,  407,  427,  426,  881,  428,  395,
      393,  400,  398,  404,  401,  429,  423,  419,  409,  412,
      430,  414,  425,  402,  410,  413,  416,  415,  418,  431,
      420,  421,  427,  432,  417,  428,  408,  434,  422,  426,
      424,  435,  429,  436,  465,  438,  441,  433,  450,  430,
      451,  450,  439,  451,  451,  465,  881,  432,  432,  452,

      456,  443,  431,  443,  443,  443,  443,  443,  435,  452,
      434,  438,  436,  456,  441,  432,  439,  439,  439,  446,
      455,  446,  446,  446,  446,  446,  446,  459,  457,  455,
      460,  459,  470,  463,  439,  457,  464,  466,  464,  468,
      467,  466,  467,  471,  472,  475,  460,  463,  476,  475,
      470,  472,  471,  474,  468,  474,  477,  478,  476,  479,
      480,  481,  482,  483,  484,  477,  487,  485,  500,  488,
      480,  489,  482,  479,  478,  491,  496,  484,  492,  494,
      505,  481,  485,  488,  493,  492,  489,  483,  496,  494,
      491,  493,  497,  501,  500,  487,  497,  502,  496,  493,

      506,  507,  509,  510,  514,  496,  512,  515,  518,  516,
      517,  520,  524,  521,  523,  525,  527,  505,  501,  522,
      528,  501,  526,  530,  529,  531,  532,  509,  533,  534,
      535,  514,  536,  540,  538,  502,  507,  517,  539,  524,
      525,  506,  516,  523,  542,  541,  515,  510,  543,  512,
      521,  518,  533,  527,  522,  545,  544,  547,  520,  554,
      526,  530,  540,  582,  532,  528,  529,  551,  559,  559,
      534,  552,  554,  531,  560,  536,  538,  557,  552,  542,
      556,  539,  547,  551,  556,  558,  561,  535,  541,  543,
      582,  544,  557,  545,  558,  565,  561,  565,  543,  544,

      548,  548,  548,  548,  548,  543,  549,  549,  549,  549,
      549,  550,  560,  550,  550,  550,  550,  550,  563,  564,
      566,  567,  568,  571,  570,  575,  568,  573,  572,  564,
      571,  573,  576,  563,  570,  567,  566,  572,  574,  575,
      578,  576,  574,  577,  579,  577,  581,  584,  588,  578,
      589,  584,  588,  590,  591,  593,  592,  594,  595,  596,
      597,  581,  598,  600,  601,  589,  607,  602,  603,  590,
      592,  591,  594,  579,  604,  605,  608,  610,  609,  611,
      613,  616,  593,  612,  614,  618,  615,  617,  600,  597,
      620,  619,  621,  622,  596,  623,  603,  624,  625,  627,

      631,  626,  595,  598,  602,  609,  616,  601,  630,  607,
      632,  633,  604,  605,  608,  634,  612,  620,  613,  614,
      617,  611,  610,  615,  623,  635,  636,  618,  619,  621,
      626,  637,  627,  643,  642,  644,  651,  630,  646,  645,
      643,  625,  646,  647,  644,  651,  631,  639,  634,  642,
      622, 1009,  624,  632,  638,  638,  638,  638,  638,  645,
      639,  639,  639,  639,  639,  650,  633,  647,  635,  648,
      636,  648,  652,  653,  637,  640,  640,  640,  640,  640,
      649,  654,  653,  655,  649,  659,  652,  656,  657,  657,
      658,  654,  659,  662,  650,  662,  661,  663,  650,  658,

      655,  663,  656,  661,  665,  667,  669,  670,  665,  671,
      672,  674,  675,  678,  676,  674,  677,  670,  679,  669,
      681,  682,  671,  676,  683,  675,  677,  672,  679,  684,
      686,  685,  667,  687,  688,  678,  689,  690,  691,  692,
      693,  694,  695,  696,  697,  701,  702,  698,  700,  706,
      704,  707,  712,  708,  686,  709,  682,  710,  713,  714,
      687,  683,  716,  681,  685,  737,  723,  688,  717,  737,
      715,  696,  701,  728,  690,  704,  692,  684,  693,  702,
      691,  697,  698,  700,  718,  695,  723,  694,  728,  722,
      707,  712,  725,  689,  708,  715,  709,  689,  714,  722,

      726,  725,  710,  716,  706,  717,  742,  758,  713,  729,
      730,  736,  734,  718,  720,  720,  720,  720,  720,  729,
      730,  734,  739,  742,  736,  744,  743,  726,  746,  726,
      726,  749,  739,  752,  745,  744,  729,  743,  745,  748,
      750,  751,  751,  748,  750,  749,  753,  754,  755,  756,
      757,  746,  760,  761,  762,  758,  752,  753,  763,  764,
      765,  772,  771,  755,  775,  769,  774,  776,  777,  779,
      754,  783,  780,  782,  778,  784,  785,  786,  756,  793,
      789,  788,  910,  762,  787,  802,  772,  797,  757,  760,
      805,  910,  792,  775,  805,  802,  798,  793,  764,  765,

      803,  763,  769,  771,  774,  780,  782,  777,  761,  788,
      761,  761,  776,  778,  764,  784,  792,  787,  796,  786,
      779,  797,  783,  789,  798,  801,  806,  785,  796,  803,
      807,  808,  811,  808,  812,  813,  814,  812,  817,  820,
      816,  806,  796,  816,  818,  819,  822,  823,  807,  821,
      826,  814,  817,  801,  827,  811,  828,  831,  832,  819,
      818,  833,  821,  813,  836,  835,  839,  820,  837,  838,
      822,  841,  842,  843,  844,  845,  846,  847,  849,  850,
      856,  854,  851,  861,  857,  858,  859,  878,  863,  826,
      835,  860,  863,  823,  880,  839,  838,  832,  862,  843,

      859,  868,  826,  856,  849,  857,  861,  836,  854,  875,
      858,  860,  828,  831,  837,  866,  827,  844,  833,  846,
      845,  850,  841,  851,  869,  866,  870,  862,  842,  868,
      871,  872,  874,  847,  876,  877,  875,  882,  883,  877,
      869,  884,  878,  885,  870,  880,  874,  872,  886,  887,
      871,  888,  876,  890,  892,  893,  894,  897,  895,  901,
      896,  898,  902,  899,  904,  905,  906,  903,  908,  915,
      909,  922,  911,  914,  913,  920,  912,  923,  904,  905,
      888,  883,  887,  903,  901,  912,  902,  911,  914,  884,
      882,  890,  913,  906,  885,  924,  908,  909,  915,  917,

      894,  925,  893,  896,  920,  886,  895,  899,  898,  921,
      892,  926,  897,  928,  917,  929,  930,  931,  921,  932,
      933,  934,  923,  922,  939,  935,  941,  942,  940,  943,
      952,  954,  950,  956,  958,  966,  957,  959,  924,  968,
      969,  971,  983,  943,  925,  950,  970,  973,  942,  954,
      957,  956,  985,  930,  986,  972,  932,  976,  974,  952,
      931,  976,  979,  941,  977,  987,  926,  933,  935,  928,
      929,  940,  974,  981,  989,  970,  966,  985,  934,  994,
      959,  939,  977,  958,  972,  983,  979,  969,  971,  973,
      993,  995,  996,  998,  999, 1002,  968,  981, 1000,  993,

     1001,  986, 1003,  994, 1007, 1006, 1008, 1005, 1004, 1002,
      997,  992,  991,  990,  995,  996,  988,  987,  984,  982,
      980,  978,  975,  967,  965, 1003,  989,  964,  963,  962,
      998,  961,  960,  955,  953,  951,  949,  948,  947,  946,
      945,  944,  938,  937,  936,  927,  999, 1006,  919, 1000,
      918, 1001,  916,  907,  900, 1007, 1015,  891, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1016, 1016, 1016,  889,
     1016, 1016, 1016, 1016, 1017,  879, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1018, 1018, 1018, 1018,  873, 1018,
     1018, 1019,  867, 1019, 1019, 1019, 1020, 1020, 1021,  865,

     1021,  864, 1021, 1021, 1022, 1022, 1022, 1023, 1023, 1024,
      855, 1024, 1024, 1025, 1025,  853, 1025,  852, 1025, 1025,
     1026,  848,  840, 1026,  834, 1026, 1026, 1027, 1027, 1028,
     1028, 1029,  830, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029,  829,  825,  824,  815,  810,  809,  804,  800,  799,
      795,  794,  790,  781,  773,  770,  768,  767,  766,  759,
      747,  741,  740,  738,  735,  733,  732,  731,  727,  724,
      721,  719,  711,  705,  703,  699,  680,  673,  668,  666,
      664,  660,  641,  629,  628,  606,  599,  587,  586,  585,
      583,  580,  569,  562,  555,  553,  546,  537,  519,  513,

      511,  508,  504,  503,  499,  498,  495,  490,  486,  473,
      469,  462,  461,  458,  454,  453,  449,  448,  447,  444,
      442,  440,  437,  411,  406,  396,  390,  387,  386,  380,
      375,  361,  357,  356,  349,  346,  339,  332,  331,  323,
      311,  291,  282,  279,  276,  274,  271,  269,  268,  259,
      258,  257,  252,  250,  249,  242,  239,  234,  230,  225,
      223,  212,  206,  205,  204,  199,  198,  197,  189,  188,
      187,  182,  174,  173,  170,  168,  167,  164,  163,  160,
      157,  149,  148,  147,  146,  141,  140,  139,  131,  130,
      129,  124,  116,  115,  112,  110,  109,  107,  105,  104,

      101,   98,   92,   88,   85,   81,   76,   74,   68,   32,
       22,   20,   10,    9,    7,    3, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "external/checkpolicy/policy_scan.l"
/* 
 * Author : Stephen Smalley, <sds@epoch.ncsc.mil> 
 */
/* Updated: David Caplan, <dac@tresys.com>
 *
 * 	Added conditional policy language extensions
 *
 *          Jason Tang    <jtang@tresys.com>
 *
 *	Added support for binary policy modules
 *
 * Copyright (C) 2003-5 Tresys Technology, LLC
 *	This program is free software; you can redistribute it and/or modify
 *  	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation, version 2.
 */
/* FLASK */
#line 23 "external/checkpolicy/policy_scan.l"
#include <sys/types.h>
#include <limits.h>
#include <stdint.h>
#include <string.h>

typedef int (* require_func_t)();

#ifdef ANDROID
#include "policy_parse.h"
#else
#include "y.tab.h"
#endif

static char linebuf[2][255];
static unsigned int lno = 0;
int yywarn(char *msg);

void set_source_file(const char *name);

char source_file[PATH_MAX];
unsigned long source_lineno = 1;

unsigned long policydb_lineno = 1;

unsigned int policydb_errors = 0;
#define YY_NO_INPUT 1
#line 1375 "/home/sangmin/cm12.1/out/host/linux-x86/obj32/EXECUTABLES/checkpolicy_intermediates/policy_scan.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 58 "external/checkpolicy/policy_scan.l"

#line 1584 "/home/sangmin/cm12.1/out/host/linux-x86/obj32/EXECUTABLES/checkpolicy_intermediates/policy_scan.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1015 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2317 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 59 "external/checkpolicy/policy_scan.l"
{ strncpy(linebuf[lno], yytext+1, 255);
                                  linebuf[lno][254] = 0;
                                  lno = 1 - lno; 
                                  policydb_lineno++;
				  source_lineno++;
                                  yyless(1); }
	YY_BREAK
case 2:
#line 66 "external/checkpolicy/policy_scan.l"
case 3:
YY_RULE_SETUP
#line 66 "external/checkpolicy/policy_scan.l"
{ return(CLONE); }
	YY_BREAK
case 4:
#line 68 "external/checkpolicy/policy_scan.l"
case 5:
YY_RULE_SETUP
#line 68 "external/checkpolicy/policy_scan.l"
{ return(COMMON); }
	YY_BREAK
case 6:
#line 70 "external/checkpolicy/policy_scan.l"
case 7:
YY_RULE_SETUP
#line 70 "external/checkpolicy/policy_scan.l"
{ return(CLASS); }
	YY_BREAK
case 8:
#line 72 "external/checkpolicy/policy_scan.l"
case 9:
YY_RULE_SETUP
#line 72 "external/checkpolicy/policy_scan.l"
{ return(CONSTRAIN); }
	YY_BREAK
case 10:
#line 74 "external/checkpolicy/policy_scan.l"
case 11:
YY_RULE_SETUP
#line 74 "external/checkpolicy/policy_scan.l"
{ return(VALIDATETRANS); }
	YY_BREAK
case 12:
#line 76 "external/checkpolicy/policy_scan.l"
case 13:
YY_RULE_SETUP
#line 76 "external/checkpolicy/policy_scan.l"
{ return(INHERITS); }
	YY_BREAK
case 14:
#line 78 "external/checkpolicy/policy_scan.l"
case 15:
YY_RULE_SETUP
#line 78 "external/checkpolicy/policy_scan.l"
{ return(SID); }
	YY_BREAK
case 16:
#line 80 "external/checkpolicy/policy_scan.l"
case 17:
YY_RULE_SETUP
#line 80 "external/checkpolicy/policy_scan.l"
{ return(ROLE); }
	YY_BREAK
case 18:
#line 82 "external/checkpolicy/policy_scan.l"
case 19:
YY_RULE_SETUP
#line 82 "external/checkpolicy/policy_scan.l"
{ return(ROLES); }
	YY_BREAK
case 20:
#line 84 "external/checkpolicy/policy_scan.l"
case 21:
YY_RULE_SETUP
#line 84 "external/checkpolicy/policy_scan.l"
{ return(ROLEATTRIBUTE);}
	YY_BREAK
case 22:
#line 86 "external/checkpolicy/policy_scan.l"
case 23:
YY_RULE_SETUP
#line 86 "external/checkpolicy/policy_scan.l"
{ return(ATTRIBUTE_ROLE);}
	YY_BREAK
case 24:
#line 88 "external/checkpolicy/policy_scan.l"
case 25:
YY_RULE_SETUP
#line 88 "external/checkpolicy/policy_scan.l"
{ return(TYPES); }
	YY_BREAK
case 26:
#line 90 "external/checkpolicy/policy_scan.l"
case 27:
YY_RULE_SETUP
#line 90 "external/checkpolicy/policy_scan.l"
{ return(TYPEALIAS); }
	YY_BREAK
case 28:
#line 92 "external/checkpolicy/policy_scan.l"
case 29:
YY_RULE_SETUP
#line 92 "external/checkpolicy/policy_scan.l"
{ return(TYPEATTRIBUTE); }
	YY_BREAK
case 30:
#line 94 "external/checkpolicy/policy_scan.l"
case 31:
YY_RULE_SETUP
#line 94 "external/checkpolicy/policy_scan.l"
{ return(TYPEBOUNDS); }
	YY_BREAK
case 32:
#line 96 "external/checkpolicy/policy_scan.l"
case 33:
YY_RULE_SETUP
#line 96 "external/checkpolicy/policy_scan.l"
{ return(TYPE); }
	YY_BREAK
case 34:
#line 98 "external/checkpolicy/policy_scan.l"
case 35:
YY_RULE_SETUP
#line 98 "external/checkpolicy/policy_scan.l"
{ return(BOOL); }
	YY_BREAK
case 36:
#line 100 "external/checkpolicy/policy_scan.l"
case 37:
YY_RULE_SETUP
#line 100 "external/checkpolicy/policy_scan.l"
{ return(TUNABLE); }
	YY_BREAK
case 38:
#line 102 "external/checkpolicy/policy_scan.l"
case 39:
YY_RULE_SETUP
#line 102 "external/checkpolicy/policy_scan.l"
{ return(IF); }
	YY_BREAK
case 40:
#line 104 "external/checkpolicy/policy_scan.l"
case 41:
YY_RULE_SETUP
#line 104 "external/checkpolicy/policy_scan.l"
{ return(ELSE); }
	YY_BREAK
case 42:
#line 106 "external/checkpolicy/policy_scan.l"
case 43:
YY_RULE_SETUP
#line 106 "external/checkpolicy/policy_scan.l"
{ return(ALIAS); }
	YY_BREAK
case 44:
#line 108 "external/checkpolicy/policy_scan.l"
case 45:
YY_RULE_SETUP
#line 108 "external/checkpolicy/policy_scan.l"
{ return(ATTRIBUTE); }
	YY_BREAK
case 46:
#line 110 "external/checkpolicy/policy_scan.l"
case 47:
YY_RULE_SETUP
#line 110 "external/checkpolicy/policy_scan.l"
{ return(TYPE_TRANSITION); }
	YY_BREAK
case 48:
#line 112 "external/checkpolicy/policy_scan.l"
case 49:
YY_RULE_SETUP
#line 112 "external/checkpolicy/policy_scan.l"
{ return(TYPE_MEMBER); }
	YY_BREAK
case 50:
#line 114 "external/checkpolicy/policy_scan.l"
case 51:
YY_RULE_SETUP
#line 114 "external/checkpolicy/policy_scan.l"
{ return(TYPE_CHANGE); }
	YY_BREAK
case 52:
#line 116 "external/checkpolicy/policy_scan.l"
case 53:
YY_RULE_SETUP
#line 116 "external/checkpolicy/policy_scan.l"
{ return(ROLE_TRANSITION); }
	YY_BREAK
case 54:
#line 118 "external/checkpolicy/policy_scan.l"
case 55:
YY_RULE_SETUP
#line 118 "external/checkpolicy/policy_scan.l"
{ return(RANGE_TRANSITION); }
	YY_BREAK
case 56:
#line 120 "external/checkpolicy/policy_scan.l"
case 57:
YY_RULE_SETUP
#line 120 "external/checkpolicy/policy_scan.l"
{ return(SENSITIVITY); }
	YY_BREAK
case 58:
#line 122 "external/checkpolicy/policy_scan.l"
case 59:
YY_RULE_SETUP
#line 122 "external/checkpolicy/policy_scan.l"
{ return(DOMINANCE); }
	YY_BREAK
case 60:
#line 124 "external/checkpolicy/policy_scan.l"
case 61:
YY_RULE_SETUP
#line 124 "external/checkpolicy/policy_scan.l"
{ return(CATEGORY); }
	YY_BREAK
case 62:
#line 126 "external/checkpolicy/policy_scan.l"
case 63:
YY_RULE_SETUP
#line 126 "external/checkpolicy/policy_scan.l"
{ return(LEVEL); }
	YY_BREAK
case 64:
#line 128 "external/checkpolicy/policy_scan.l"
case 65:
YY_RULE_SETUP
#line 128 "external/checkpolicy/policy_scan.l"
{ return(RANGE); }
	YY_BREAK
case 66:
#line 130 "external/checkpolicy/policy_scan.l"
case 67:
YY_RULE_SETUP
#line 130 "external/checkpolicy/policy_scan.l"
{ return(MLSCONSTRAIN); }
	YY_BREAK
case 68:
#line 132 "external/checkpolicy/policy_scan.l"
case 69:
YY_RULE_SETUP
#line 132 "external/checkpolicy/policy_scan.l"
{ return(MLSVALIDATETRANS); }
	YY_BREAK
case 70:
#line 134 "external/checkpolicy/policy_scan.l"
case 71:
YY_RULE_SETUP
#line 134 "external/checkpolicy/policy_scan.l"
{ return(USER); }
	YY_BREAK
case 72:
#line 136 "external/checkpolicy/policy_scan.l"
case 73:
YY_RULE_SETUP
#line 136 "external/checkpolicy/policy_scan.l"
{ return(NEVERALLOW); }
	YY_BREAK
case 74:
#line 138 "external/checkpolicy/policy_scan.l"
case 75:
YY_RULE_SETUP
#line 138 "external/checkpolicy/policy_scan.l"
{ return(ALLOW); }
	YY_BREAK
case 76:
#line 140 "external/checkpolicy/policy_scan.l"
case 77:
YY_RULE_SETUP
#line 140 "external/checkpolicy/policy_scan.l"
{ return(AUDITALLOW); }
	YY_BREAK
case 78:
#line 142 "external/checkpolicy/policy_scan.l"
case 79:
YY_RULE_SETUP
#line 142 "external/checkpolicy/policy_scan.l"
{ return(AUDITDENY); }
	YY_BREAK
case 80:
#line 144 "external/checkpolicy/policy_scan.l"
case 81:
YY_RULE_SETUP
#line 144 "external/checkpolicy/policy_scan.l"
{ return(DONTAUDIT); }
	YY_BREAK
case 82:
#line 146 "external/checkpolicy/policy_scan.l"
case 83:
YY_RULE_SETUP
#line 146 "external/checkpolicy/policy_scan.l"
{ return(SOURCE); }
	YY_BREAK
case 84:
#line 148 "external/checkpolicy/policy_scan.l"
case 85:
YY_RULE_SETUP
#line 148 "external/checkpolicy/policy_scan.l"
{ return(TARGET); }
	YY_BREAK
case 86:
#line 150 "external/checkpolicy/policy_scan.l"
case 87:
YY_RULE_SETUP
#line 150 "external/checkpolicy/policy_scan.l"
{ return(SAMEUSER);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 151 "external/checkpolicy/policy_scan.l"
{ return(MODULE); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 152 "external/checkpolicy/policy_scan.l"
{ return(REQUIRE); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 153 "external/checkpolicy/policy_scan.l"
{ return(OPTIONAL); }
	YY_BREAK
case 91:
#line 155 "external/checkpolicy/policy_scan.l"
case 92:
YY_RULE_SETUP
#line 155 "external/checkpolicy/policy_scan.l"
{ return(OR);}
	YY_BREAK
case 93:
#line 157 "external/checkpolicy/policy_scan.l"
case 94:
YY_RULE_SETUP
#line 157 "external/checkpolicy/policy_scan.l"
{ return(AND);}
	YY_BREAK
case 95:
#line 159 "external/checkpolicy/policy_scan.l"
case 96:
YY_RULE_SETUP
#line 159 "external/checkpolicy/policy_scan.l"
{ return(NOT);}
	YY_BREAK
case 97:
#line 161 "external/checkpolicy/policy_scan.l"
case 98:
YY_RULE_SETUP
#line 161 "external/checkpolicy/policy_scan.l"
{ return(XOR); }
	YY_BREAK
case 99:
#line 163 "external/checkpolicy/policy_scan.l"
case 100:
YY_RULE_SETUP
#line 163 "external/checkpolicy/policy_scan.l"
{ return(EQUALS);}
	YY_BREAK
case 101:
#line 165 "external/checkpolicy/policy_scan.l"
case 102:
YY_RULE_SETUP
#line 165 "external/checkpolicy/policy_scan.l"
{ return(CTRUE); } 
	YY_BREAK
case 103:
#line 167 "external/checkpolicy/policy_scan.l"
case 104:
YY_RULE_SETUP
#line 167 "external/checkpolicy/policy_scan.l"
{ return(CFALSE); } 
	YY_BREAK
case 105:
#line 169 "external/checkpolicy/policy_scan.l"
case 106:
YY_RULE_SETUP
#line 169 "external/checkpolicy/policy_scan.l"
{ return(DOM);}
	YY_BREAK
case 107:
#line 171 "external/checkpolicy/policy_scan.l"
case 108:
YY_RULE_SETUP
#line 171 "external/checkpolicy/policy_scan.l"
{ return(DOMBY);}
	YY_BREAK
case 109:
#line 173 "external/checkpolicy/policy_scan.l"
case 110:
YY_RULE_SETUP
#line 173 "external/checkpolicy/policy_scan.l"
{ return(INCOMP);}
	YY_BREAK
case 111:
#line 175 "external/checkpolicy/policy_scan.l"
case 112:
YY_RULE_SETUP
#line 175 "external/checkpolicy/policy_scan.l"
{ return(FSCON);}
	YY_BREAK
case 113:
#line 177 "external/checkpolicy/policy_scan.l"
case 114:
YY_RULE_SETUP
#line 177 "external/checkpolicy/policy_scan.l"
{ return(PORTCON);}
	YY_BREAK
case 115:
#line 179 "external/checkpolicy/policy_scan.l"
case 116:
YY_RULE_SETUP
#line 179 "external/checkpolicy/policy_scan.l"
{ return(NETIFCON);}
	YY_BREAK
case 117:
#line 181 "external/checkpolicy/policy_scan.l"
case 118:
YY_RULE_SETUP
#line 181 "external/checkpolicy/policy_scan.l"
{ return(NODECON);}
	YY_BREAK
case 119:
#line 183 "external/checkpolicy/policy_scan.l"
case 120:
YY_RULE_SETUP
#line 183 "external/checkpolicy/policy_scan.l"
{ return(PIRQCON);}
	YY_BREAK
case 121:
#line 185 "external/checkpolicy/policy_scan.l"
case 122:
YY_RULE_SETUP
#line 185 "external/checkpolicy/policy_scan.l"
{ return(IOMEMCON);}
	YY_BREAK
case 123:
#line 187 "external/checkpolicy/policy_scan.l"
case 124:
YY_RULE_SETUP
#line 187 "external/checkpolicy/policy_scan.l"
{ return(IOPORTCON);}
	YY_BREAK
case 125:
#line 189 "external/checkpolicy/policy_scan.l"
case 126:
YY_RULE_SETUP
#line 189 "external/checkpolicy/policy_scan.l"
{ return(PCIDEVICECON);}
	YY_BREAK
case 127:
#line 191 "external/checkpolicy/policy_scan.l"
case 128:
YY_RULE_SETUP
#line 191 "external/checkpolicy/policy_scan.l"
{ return(FSUSEXATTR);}
	YY_BREAK
case 129:
#line 193 "external/checkpolicy/policy_scan.l"
case 130:
YY_RULE_SETUP
#line 193 "external/checkpolicy/policy_scan.l"
{ return(FSUSETASK);}
	YY_BREAK
case 131:
#line 195 "external/checkpolicy/policy_scan.l"
case 132:
YY_RULE_SETUP
#line 195 "external/checkpolicy/policy_scan.l"
{ return(FSUSETRANS);}
	YY_BREAK
case 133:
#line 197 "external/checkpolicy/policy_scan.l"
case 134:
YY_RULE_SETUP
#line 197 "external/checkpolicy/policy_scan.l"
{ return(GENFSCON);}
	YY_BREAK
case 135:
#line 199 "external/checkpolicy/policy_scan.l"
case 136:
YY_RULE_SETUP
#line 199 "external/checkpolicy/policy_scan.l"
{ return(R1); }
	YY_BREAK
case 137:
#line 201 "external/checkpolicy/policy_scan.l"
case 138:
YY_RULE_SETUP
#line 201 "external/checkpolicy/policy_scan.l"
{ return(R2); }
	YY_BREAK
case 139:
#line 203 "external/checkpolicy/policy_scan.l"
case 140:
YY_RULE_SETUP
#line 203 "external/checkpolicy/policy_scan.l"
{ return(R3); }
	YY_BREAK
case 141:
#line 205 "external/checkpolicy/policy_scan.l"
case 142:
YY_RULE_SETUP
#line 205 "external/checkpolicy/policy_scan.l"
{ return(U1); }
	YY_BREAK
case 143:
#line 207 "external/checkpolicy/policy_scan.l"
case 144:
YY_RULE_SETUP
#line 207 "external/checkpolicy/policy_scan.l"
{ return(U2); }
	YY_BREAK
case 145:
#line 209 "external/checkpolicy/policy_scan.l"
case 146:
YY_RULE_SETUP
#line 209 "external/checkpolicy/policy_scan.l"
{ return(U3); }
	YY_BREAK
case 147:
#line 211 "external/checkpolicy/policy_scan.l"
case 148:
YY_RULE_SETUP
#line 211 "external/checkpolicy/policy_scan.l"
{ return(T1); }
	YY_BREAK
case 149:
#line 213 "external/checkpolicy/policy_scan.l"
case 150:
YY_RULE_SETUP
#line 213 "external/checkpolicy/policy_scan.l"
{ return(T2); }
	YY_BREAK
case 151:
#line 215 "external/checkpolicy/policy_scan.l"
case 152:
YY_RULE_SETUP
#line 215 "external/checkpolicy/policy_scan.l"
{ return(T3); }
	YY_BREAK
case 153:
#line 217 "external/checkpolicy/policy_scan.l"
case 154:
YY_RULE_SETUP
#line 217 "external/checkpolicy/policy_scan.l"
{ return(L1); }
	YY_BREAK
case 155:
#line 219 "external/checkpolicy/policy_scan.l"
case 156:
YY_RULE_SETUP
#line 219 "external/checkpolicy/policy_scan.l"
{ return(L2); }
	YY_BREAK
case 157:
#line 221 "external/checkpolicy/policy_scan.l"
case 158:
YY_RULE_SETUP
#line 221 "external/checkpolicy/policy_scan.l"
{ return(H1); }
	YY_BREAK
case 159:
#line 223 "external/checkpolicy/policy_scan.l"
case 160:
YY_RULE_SETUP
#line 223 "external/checkpolicy/policy_scan.l"
{ return(H2); }
	YY_BREAK
case 161:
#line 225 "external/checkpolicy/policy_scan.l"
case 162:
YY_RULE_SETUP
#line 225 "external/checkpolicy/policy_scan.l"
{ return(POLICYCAP); }
	YY_BREAK
case 163:
#line 227 "external/checkpolicy/policy_scan.l"
case 164:
YY_RULE_SETUP
#line 227 "external/checkpolicy/policy_scan.l"
{ return(PERMISSIVE); }
	YY_BREAK
case 165:
#line 229 "external/checkpolicy/policy_scan.l"
case 166:
YY_RULE_SETUP
#line 229 "external/checkpolicy/policy_scan.l"
{ return(DEFAULT_USER); }
	YY_BREAK
case 167:
#line 231 "external/checkpolicy/policy_scan.l"
case 168:
YY_RULE_SETUP
#line 231 "external/checkpolicy/policy_scan.l"
{ return(DEFAULT_ROLE); }
	YY_BREAK
case 169:
#line 233 "external/checkpolicy/policy_scan.l"
case 170:
YY_RULE_SETUP
#line 233 "external/checkpolicy/policy_scan.l"
{ return(DEFAULT_TYPE); }
	YY_BREAK
case 171:
#line 235 "external/checkpolicy/policy_scan.l"
case 172:
YY_RULE_SETUP
#line 235 "external/checkpolicy/policy_scan.l"
{ return(DEFAULT_RANGE); }
	YY_BREAK
case 173:
#line 237 "external/checkpolicy/policy_scan.l"
case 174:
YY_RULE_SETUP
#line 237 "external/checkpolicy/policy_scan.l"
{ return(LOW_HIGH); }
	YY_BREAK
case 175:
#line 239 "external/checkpolicy/policy_scan.l"
case 176:
YY_RULE_SETUP
#line 239 "external/checkpolicy/policy_scan.l"
{ return(HIGH); }
	YY_BREAK
case 177:
#line 241 "external/checkpolicy/policy_scan.l"
case 178:
YY_RULE_SETUP
#line 241 "external/checkpolicy/policy_scan.l"
{ return(LOW); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 242 "external/checkpolicy/policy_scan.l"
{ return(PATH); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 243 "external/checkpolicy/policy_scan.l"
{ return(FILENAME); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 244 "external/checkpolicy/policy_scan.l"
{ return(IDENTIFIER); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 245 "external/checkpolicy/policy_scan.l"
{ return(FILESYSTEM); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 246 "external/checkpolicy/policy_scan.l"
{ return(NUMBER); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 247 "external/checkpolicy/policy_scan.l"
{ return(IPV4_ADDR); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 248 "external/checkpolicy/policy_scan.l"
{ return(IPV6_ADDR); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 249 "external/checkpolicy/policy_scan.l"
{ return(VERSION_IDENTIFIER); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 250 "external/checkpolicy/policy_scan.l"
{ set_source_file(yytext+9); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 251 "external/checkpolicy/policy_scan.l"
{ source_lineno = atoi(yytext+6)-1; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 252 "external/checkpolicy/policy_scan.l"
{ /* delete comments */ }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 253 "external/checkpolicy/policy_scan.l"
{ /* delete whitespace */ }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 254 "external/checkpolicy/policy_scan.l"
{ return(EQUALS); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 255 "external/checkpolicy/policy_scan.l"
{ return (NOTEQUAL); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 256 "external/checkpolicy/policy_scan.l"
{ return (AND); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 257 "external/checkpolicy/policy_scan.l"
{ return (OR); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 258 "external/checkpolicy/policy_scan.l"
{ return (NOT); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 259 "external/checkpolicy/policy_scan.l"
{ return (XOR); }
	YY_BREAK
case 197:
#line 261 "external/checkpolicy/policy_scan.l"
case 198:
#line 262 "external/checkpolicy/policy_scan.l"
case 199:
#line 263 "external/checkpolicy/policy_scan.l"
case 200:
#line 264 "external/checkpolicy/policy_scan.l"
case 201:
#line 265 "external/checkpolicy/policy_scan.l"
case 202:
#line 266 "external/checkpolicy/policy_scan.l"
case 203:
#line 267 "external/checkpolicy/policy_scan.l"
case 204:
#line 268 "external/checkpolicy/policy_scan.l"
case 205:
#line 269 "external/checkpolicy/policy_scan.l"
case 206:
#line 270 "external/checkpolicy/policy_scan.l"
case 207:
#line 271 "external/checkpolicy/policy_scan.l"
case 208:
#line 272 "external/checkpolicy/policy_scan.l"
case 209:
YY_RULE_SETUP
#line 272 "external/checkpolicy/policy_scan.l"
{ return(yytext[0]); } 
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 273 "external/checkpolicy/policy_scan.l"
{ yywarn("unrecognized character");}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 274 "external/checkpolicy/policy_scan.l"
ECHO;
	YY_BREAK
#line 2405 "/home/sangmin/cm12.1/out/host/linux-x86/obj32/EXECUTABLES/checkpolicy_intermediates/policy_scan.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1015 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1015 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1014);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 274 "external/checkpolicy/policy_scan.l"


int yyerror(char *msg)
{
	if (source_file[0])
		fprintf(stderr, "%s:%ld:",
			source_file, source_lineno);
	else
		fprintf(stderr, "(unknown source)::");
	fprintf(stderr, "ERROR '%s' at token '%s' on line %ld:\n%s\n%s\n",
			msg,
			yytext,
			policydb_lineno,
			linebuf[0], linebuf[1]);
	policydb_errors++;
	return -1;
}

int yywarn(char *msg)
{
	if (source_file[0])
		fprintf(stderr, "%s:%ld:",
			source_file, source_lineno);
	else
		fprintf(stderr, "(unknown source)::");
	fprintf(stderr, "WARNING '%s' at token '%s' on line %ld:\n%s\n%s\n",
			msg,
			yytext,
			policydb_lineno,
			linebuf[0], linebuf[1]);
	return 0;
}

void set_source_file(const char *name)
{
	source_lineno = 1;
	strncpy(source_file, name, sizeof(source_file)-1); 
	source_file[sizeof(source_file)-1] = '\0';
	if (strlen(source_file) && source_file[strlen(source_file)-1] == '"')
		source_file[strlen(source_file)-1] = '\0';
}

